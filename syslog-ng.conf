@version: 4.9
@include "scl.conf"

# Global options for syslog-ng
options {
    # Enable threading for better performance
    threaded(yes);
    
    # Performance optimizations
    chain_hostnames(off);
    flush_lines(0);
    use_dns(no);
    use_fqdn(no);
    
    # Security settings
    keep_hostname(yes);
    keep_timestamp(yes);
    
    # Message parsing
    time_reopen(10);
    use_rcptid(no);
    
    # Logging
    stats(freq(3600));
    stats-level(3);
};

# Network source - listens on UDP 5514 for syslog messages
source s_network {
    udp(
        ip(0.0.0.0)
        port(5514)
        so_rcvbuf(1048576)  # 1MB receive buffer
        log-iw-size(10000)  # Initial window size for flow control
        max-connections(1000)
    );
};

# Console output for debugging (stdout)
destination d_stdout {
    file("/dev/stdout");
};

# Linux/Unix system logs destination with metadata
destination d_sentinelone_linux {
    http(
        url("${S1_HEC_URL}/services/collector/raw?sourcetype=linuxSyslog&dataSource.category=security&dataSource.vendor=Linux&dataSource.name=System%20Logs&metadata.version=1.0.0&severity_id=6")
        headers(
            "Authorization: Bearer ${S1_HEC_WRITE_TOKEN}",
            "Content-Type: text/plain"
        )
        body("${ISODATE} ${HOST} ${MSGHDR}${MSG}")
        method("POST")
        content-compression("gzip")
        batch-lines(1000)
        batch-bytes(1M)
        batch-timeout(2000)
        retries(3)
        workers(2)
        time-reopen(60)
        tls(
            peer-verify(no)
            ca-dir("/etc/ssl/certs")
        )
    );
};

# FortiGate Firewall logs destination with enhanced metadata
destination d_sentinelone_fortigate {
    http(
        url("${S1_HEC_URL}/services/collector/raw?sourcetype=marketplace-fortinetfortigate-latest&dataSource.category=security&dataSource.name=FortiGate&dataSource.vendor=Fortinet&metadata.version=1.0.0&metadata.product.vendor_name=Fortinet&metadata.product.name=FortiGate&severity_id=99&category_uid=3&category_name=Network%20Activity")
        headers(
            "Authorization: Bearer ${S1_HEC_WRITE_TOKEN}",
            "Content-Type: text/plain"
        )
        body("${MSGHDR}${MSG}")
        method("POST")
        content-compression("gzip")
        batch-lines(500)
        batch-bytes(1M)
        batch-timeout(1000)
        retries(3)
        workers(2)
        time-reopen(60)
        tls(
            peer-verify(no)
            ca-dir("/etc/ssl/certs")
        )
    );
};

# ZScaler proxy logs destination with enhanced metadata
destination d_sentinelone_zscaler {
    http(
        url("${S1_HEC_URL}/services/collector/raw?sourcetype=marketplace-zscalerinternetaccess-latest&dataSource.category=security&dataSource.name=Zscaler%20Internet%20Access&dataSource.vendor=Zscaler&metadata.version=1.0.0&metadata.product.vendor_name=Zscaler&metadata.product.name=ZIA&category_uid=4&category_name=Network%20Activity")
        headers(
            "Authorization: Bearer ${S1_HEC_WRITE_TOKEN}",
            "Content-Type: text/plain"
        )
        body("${MSGHDR}${MSG}")
        method("POST")
        content-compression("gzip")
        batch-lines(500)
        batch-bytes(1M)
        batch-timeout(1000)
        retries(3)
        workers(2)
        time-reopen(60)
        tls(
            peer-verify(no)
            ca-dir("/etc/ssl/certs")
        )
    );
};

# Fallback destination for unmatched logs with conservative settings
destination d_sentinelone_fallback {
    http(
        url("${S1_HEC_URL}/services/collector/raw?sourcetype=unmatched&dataSource.category=security")
        headers(
            "Authorization: Bearer ${S1_HEC_WRITE_TOKEN}",
            "Content-Type: text/plain"
        )
        body("${MSGHDR}${MSG}")
        method("POST")
        content-compression("gzip")
        batch-lines(100)
        batch-bytes(100K)
        batch-timeout(5000)
        retries(2)
        workers(1)
        time-reopen(60)
        tls(
            peer-verify(no)
            ca-dir("/etc/ssl/certs")
        )
    );
};

# Log routing with source matching and parsing
log {
    source(s_network);
    
    # Always log to console for debugging
    destination(d_stdout);
    
    # Linux/Unix system logs - match common system components
    if (match("sshd|systemd|kernel|cron|authpriv" value("PROGRAM")) or
        match("pam_|sudo:|su:|sshd" value("MESSAGE")) or
        match("CRON|systemd|kernel" value("PROGRAM"))) {
        destination(d_sentinelone_linux);
    }
    # FortiGate Firewall logs - match FortiGate specific patterns
    elif (match("devname=\"FortiGate" value("MESSAGE")) or
          match("type=\"traffic\"|subtype=\"forwarded\"" value("MESSAGE")) or
          match("logid=\"[0-9]+" value("MESSAGE"))) {
        destination(d_sentinelone_fortigate);
    }
    # ZScaler proxy logs - match ZScaler specific patterns
    elif (match("zscaler\." value("HOST")) or
          match("product=\"NSS\"" value("MESSAGE")) or
          match("vendor=\"Zscaler\"" value("MESSAGE")) or
          match("action=\"(Allow|Deny)\"" value("MESSAGE"))) {
        destination(d_sentinelone_zscaler);
    }
    # Fallback for unmatched logs - log with minimal processing
    else {
        destination(d_sentinelone_fallback);
    };
};
