---
name: test-rootless

on:
  push:
    paths:
      - 'Dockerfiles/syslog-ng-rootless/**'
      - 'entrypoint.sh'
      - 'syslog-ng.conf.tmpl'
      - 'docker-compose.yml'
      - '.github/workflows/test-rootless.yml'
  workflow_dispatch:

jobs:
  test-rootless-compatibility:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup rootless Docker with AppArmor fix
        run: |
          # Fix AppArmor restrictions for rootless Docker
          sudo tee "/etc/apparmor.d/home.runner.bin.rootlesskit" <<EOT
          # ref: https://ubuntu.com/blog/ubuntu-23-10-restricted-unprivileged-user-namespaces
          abi <abi/4.0>,
          include <tunables/global>
          
          /home/runner/bin/rootlesskit flags=(unconfined) {
            userns,
          
            # Site-specific additions and overrides. See local/README for details.
            include if exists <local/home.runner.bin.rootlesskit>
          }
          EOT
          sudo systemctl restart apparmor.service
          
      - name: Setup rootless Docker
        uses: ScribeMD/rootless-docker@0.2.2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.API_TOKEN }}

      - name: Build rootless syslog container
        run: |
          docker build -f Dockerfiles/syslog-ng-rootless/Dockerfile -t test-syslog-rootless .

      - name: Test container runs as non-root user
        run: |
          # Start container and verify it runs as non-root
          docker run -d --name test-syslog-rootless test-syslog-rootless
          
          # Check the user ID inside the container
          USER_ID=$(docker exec test-syslog-rootless id -u)
          echo "Container running as user ID: $USER_ID"
          
          if [ "$USER_ID" -eq 0 ]; then
            echo "ERROR: Container is running as root (UID 0)"
            exit 1
          else
            echo "SUCCESS: Container is running as non-root user (UID $USER_ID)"
          fi
          
          docker stop test-syslog-rootless
          docker rm test-syslog-rootless

      - name: Test container with restricted capabilities
        run: |
          # Test that container works without privileged mode
          docker run -d --name test-syslog-restricted \
            --cap-drop=ALL \
            --cap-add=NET_BIND_SERVICE \
            -p 5514:5514/udp \
            test-syslog-rootless
          
          # Wait for container to start
          sleep 5
          
          # Check if container is still running (indicates syslog-ng started successfully)
          if docker ps --filter "name=test-syslog-restricted" --filter "status=running" | grep -q test-syslog-restricted; then
            echo "SUCCESS: Container is running with restricted capabilities"
            # Also check if we can connect to the syslog port
            if timeout 5 bash -c "echo 'test' | nc -u 127.0.0.1 5514"; then
              echo "SUCCESS: syslog port is accessible"
            else
              echo "WARNING: Could not send test data to syslog port (nc may not be available)"
            fi
          else
            echo "ERROR: Container failed to start or crashed with restricted capabilities"
            echo "=== Container logs ==="
            docker logs test-syslog-restricted
            exit 1
          fi
          
          docker stop test-syslog-restricted
          docker rm test-syslog-restricted

      - name: Test file permissions and ownership
        run: |
          # Test that container creates files with correct ownership
          docker run --rm \
            -v "$PWD/test-logs:/tmp/logs" \
            test-syslog-rootless \
            sh -c "touch /tmp/logs/test-file && ls -la /tmp/logs/test-file"
          
          # Check that the created file is owned by the runner user (not root)
          if [ -f "test-logs/test-file" ]; then
            FILE_OWNER=$(stat -c %U test-logs/test-file)
            if [ "$FILE_OWNER" = "root" ]; then
              echo "ERROR: File created by container is owned by root"
              exit 1
            else
              echo "SUCCESS: File created by container is owned by $FILE_OWNER (not root)"
            fi
            rm -rf test-logs/
          else
            echo "ERROR: Container failed to create test file"
            exit 1
          fi

      - name: Test syslog functionality with sample data
        run: |
          # Start container with volume mount for logs
          mkdir -p test-output
          docker run -d --name test-syslog-function \
            -p 5514:5514/udp \
            -v "$PWD/test-output:/opt/syslog-ng/logs" \
            test-syslog-rootless
          
          # Wait for container to start
          sleep 10
          
          # Send test log data
          echo "Testing rootless syslog functionality" | \
            docker run --rm -i --network host \
              ghcr.io/sva-s1/alpine-nc:latest \
              nc -u -w 2 127.0.0.1 5514
          
          # Wait for log processing
          sleep 5
          
          # Check container logs for any errors
          echo "=== Container logs ==="
          docker logs test-syslog-function
          
          # Verify container is still running (no crashes)
          if docker ps | grep -q test-syslog-function; then
            echo "SUCCESS: Container is still running after processing logs"
          else
            echo "ERROR: Container crashed or stopped unexpectedly"
            exit 1
          fi
          
          # Cleanup
          docker stop test-syslog-function
          docker rm test-syslog-function
          rm -rf test-output/

      - name: Test docker-compose with rootless
        run: |
          # Create test .env file
          echo "PORT1_NUMBER=5514" > .env
          echo "PORT1_PROTOCOL=udp" >> .env
          
          # Start services
          docker compose up -d
          
          # Wait for services to start
          sleep 15
          
          # Check that syslog service is running
          if docker compose ps | grep -q "syslog.*Up"; then
            echo "SUCCESS: Docker Compose services are running"
          else
            echo "ERROR: Docker Compose services failed to start properly"
            docker compose logs
            exit 1
          fi
          
          # Send test data via compose setup
          echo "Testing compose rootless setup" | \
            docker run --rm -i --network host \
              ghcr.io/sva-s1/alpine-nc:latest \
              nc -u -w 2 127.0.0.1 5514
          
          # Wait and check logs
          sleep 5
          docker compose logs
          
          # Cleanup
          docker compose down
          rm -f .env

      - name: Verify no root-owned files created
        run: |
          # Check that no files in the workspace are owned by root
          ROOT_FILES=$(find . -user root 2>/dev/null || true)
          if [ -n "$ROOT_FILES" ]; then
            echo "ERROR: Found root-owned files in workspace:"
            echo "$ROOT_FILES"
            exit 1
          else
            echo "SUCCESS: No root-owned files found in workspace"
          fi